version: '3.8'

services:
  # vLLM inference server
  vllm:
    image: vllm/vllm-openai:latest
    container_name: crush-vllm
    runtime: nvidia
    ports:
      - "8000:8000"
    volumes:
      - ${HOME}/.cache/huggingface:/root/.cache/huggingface
      - ./models:/models
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      - HF_TOKEN=${HF_TOKEN}
    command: >
      --model ${VLLM_MODEL:-Qwen/Qwen2.5-Coder-32B-Instruct-AWQ}
      --port 8000
      --gpu-memory-utilization ${GPU_MEMORY:-0.9}
      --max-model-len ${MAX_MODEL_LEN:-32768}
      --tensor-parallel-size ${TENSOR_PARALLEL:-1}
      --quantization ${QUANTIZATION:-awq}
      --trust-remote-code
      --enable-prefix-caching
      --max-num-seqs 256
      --max-num-batched-tokens 8192
      --enforce-eager false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Optional: Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: crush-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # Optional: Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: crush-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: crush-network