name: CI/CD - Native (No Docker)
on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  PYTHON_VERSION: '3.11'
  CACHE_KEY_SUFFIX: v1

jobs:
  # Fast preliminary checks
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/.cache/golangci-lint
          key: go-tools-${{ runner.os }}-${{ env.GO_VERSION }}-${{ env.CACHE_KEY_SUFFIX }}

      - name: Install tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install mvdan.cc/gofumpt@latest

      - name: Format check
        run: |
          if [ "$(gofumpt -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'make fmt'"
            gofumpt -l .
            exit 1
          fi

      - name: Lint
        run: golangci-lint run --timeout=5m

      - name: Go mod verify
        run: |
          go mod tidy
          go mod verify

  # Unit tests with coverage
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        go-version: ['1.24']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.24'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # Build matrix for multiple platforms
  build-matrix:
    name: Build (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: [lint-and-format, test-unit]
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          - os: darwin
            arch: amd64
            runner: macos-13
          - os: darwin
            arch: arm64
            runner: macos-latest
          - os: windows
            arch: amd64
            runner: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w" -o crush-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} .

      - name: Test binary execution
        if: matrix.os == 'linux' && matrix.arch == 'amd64'
        run: |
          chmod +x ./crush-${{ matrix.os }}-${{ matrix.arch }}
          ./crush-${{ matrix.os }}-${{ matrix.arch }} --help

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crush-${{ matrix.os }}-${{ matrix.arch }}
          path: crush-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}

  # Integration tests with vLLM (CPU-only for CI)
  test-integration:
    name: Integration Tests (vLLM CPU)
    runs-on: ubuntu-latest
    needs: test-unit
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv venv venv-ci
          source venv-ci/bin/activate
          uv pip install vllm torch --cpu-only
          uv pip install huggingface-hub transformers tokenizers

      - name: Build Crush
        run: go build -o crush .

      - name: Start vLLM server (background)
        run: |
          source venv-ci/bin/activate
          python -m vllm.entrypoints.openai.api_server \
            --model facebook/opt-125m \
            --port 8000 \
            --host 0.0.0.0 \
            --max-model-len 512 \
            --disable-log-requests \
            --trust-remote-code &
          echo $! > vllm.pid
          
      - name: Wait for vLLM readiness
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

      - name: Run integration tests
        run: |
          # Test vLLM API directly
          curl -X POST http://localhost:8000/v1/completions \
            -H "Content-Type: application/json" \
            -d '{
              "model": "facebook/opt-125m",
              "prompt": "Hello, world!",
              "max_tokens": 10,
              "temperature": 0.1
            }' | jq .

          # Test Crush with vLLM (if integration tests exist)
          # ./scripts/test-integration-ci.sh

      - name: Cleanup
        if: always()
        run: |
          if [ -f vllm.pid ]; then
            kill $(cat vllm.pid) || true
          fi

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install security tools
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run gosec
        run: gosec ./...

      - name: Run govulncheck
        run: govulncheck ./...

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -benchtime=3s ./... | tee benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks
          path: benchmark.txt

  # Release preparation (only on main branch)
  prepare-release:
    name: Prepare Release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build-matrix, test-integration, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install GoReleaser
        run: go install github.com/goreleaser/goreleaser@latest

      - name: Test release build
        run: goreleaser build --snapshot --clean

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-snapshot
          path: dist/

  # Deployment readiness check
  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Build Matrix: ${{ needs.build-matrix.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Release Prep: ${{ needs.prepare-release.result }}"
          
          if [[ "${{ needs.build-matrix.result }}" == "success" && 
                "${{ needs.test-integration.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All checks passed - Ready for deployment"
            exit 0
          else
            echo "❌ Some checks failed - Not ready for deployment"
            exit 1
          fi